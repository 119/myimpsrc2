#include "imp_pea_detector.h"


#define IP_CHAR2INT_PRECISION	6
#define IP_CHAR2INT_HALF		(1<<(IP_CHAR2INT_PRECISION-1))

#define IP_CODEWORD_UNUSED	0

#define IP_CODEWORD_FG	1

#define IP_CODEWORD_FG_CHANGE	2

#define IP_CODEWORD_BG	3


#define IP_GET_CW_TYPE(type)	( (type) )

#define IP_SET_CW_TYPE(x,type)	( (x) = type )

#define IP_GET_CURRENT_MATCH(cwMaps)	( cwMaps->codewords[0].match )

#define IP_SET_CURRENT_MATCH(cwMaps,type)	( cwMaps->codewords[0].match = (IMP_U8)(type) )


#define SUPPORT_CODEBOOK_FAST

#ifdef SUPPORT_CODEBOOK_FAST
#define CODEBOOK_LEN 2
#define CLASTER_DISTANCE 15
#define UPDATE_TIME 1
#define CODE_WEIGHT 10

enum IpClearStale
{
	IP_INITIATIVE=1,
	IP_PASSIVE
};


typedef struct IpBGCodeBookFastElem
{
	IMP_U8 clusterCenter;
	IMP_U8 weight;
}IpBGCodeBookFastElem;

typedef struct IpBGCodeBookFastModel
{
	IpBGCodeBookFastElem codebookElems[CODEBOOK_LEN];
}IpBGCodeBookFastModel;
#endif



typedef struct
{
	IMP_S16 cluster;
	IMP_U8 type;
	IMP_U8 match;
	IMP_U16 time;
} IpCodeword;


typedef struct
{
	IMP_U16 life;
	IpCodeword codewords[2];
} IpCodewordPixel;

typedef struct
{
	IMP_S32 width;
	IMP_S32 height;
	IpCodewordPixel *cwMaps;
} IpCodebookImage;


typedef struct
{
	IMP_U32 time_pre;
	GA_CYCLE_INTEGER_ARRAY_S ratio;
} IpForegroundRatioHistory;

typedef struct
{

	IMP_S32 theta_crl_gray;
	IMP_S32 theta_Imax;
	IMP_S32 theta_Imin;
	IMP_S32 theta_factor;
	IMP_S32 learn_rate;
	IMP_S32 diff_is_fg;
	IMP_S32 frm_diff_dura;
	IMP_S32 proc_slow_light;


	IMP_S32 Tad_period;
	IMP_S32 Tinit_add;
	IMP_S32 Tinit_del;
	IMP_S32 Twork_add;
	IMP_S32 Twork_del;
	IMP_S32 Tstatic_add;
	IMP_S32 Tstatic_del;
	IMP_S32 Tstatic_inc;
	IMP_S32 Tstatic_ratio;
	IMP_S32 Tchange_add;
	IMP_S32 NRmnrl;
	IMP_S32 NRmnrl_bge;
	IMP_S32 NRattl;
	IMP_S32 do_whole_lv2to3;
	IMP_S32 th_lv2_fg;
	IMP_S32 th_lv2to3;


	IMP_S32 use_motion;
	IMP_S32 use_static_left;
	IMP_S32 use_static_removed;
	IMP_S32 use_change_light;
	IMP_S32 fback_tgt2rgn;

	// suppress light
	IMP_S32 th_suplit_fg_ratio_h;
	IMP_S32 th_suplit_fg_ratio_l;
	IMP_S32 th_suplit_incr_ratio;
	IMP_S32 th_suplit_pix_ratio;
	IMP_S32 th_suplit_pix_num;
	IMP_S32 suplit_theta_max;
	IMP_S32 suplit_fgratio_hislen;

} IpCodebookPara;


enum
{
	IP_BACKGROUND_SHORT,
	IP_BACKGROUND_LONG
};


typedef struct IpBGCodeBookOptimizedModel
{
    GA_HARDWARE_RS_S *hw_resource;
	PEA_RESULT_S *iresult;
	PEA_BG_MODEL_DATA_S bgModelData;
	IpCodebookPara mpara;
	IpCodebookBgModelPara  paramsFastLi;
	IpForegroundRatioHistory fgRatioHistory;
	IpCodebookImage codebookImage;
	HISTORY_IMAGE_S imghis;
	IMP_S32	fgHistogram[256];
	IMP_S32	nframes;
	IMP_S32   frmcnt;
	IMP_S32	udpm_time_pre;
	IMP_S32   noise_area;
	IMP_S32   noise_area_avg;
	IMP_S32   noise_adjust_theta_cnt;

	GRAY_IMAGE_S      background;
	GRAY_IMAGE_S      foreground;
	GRAY_IMAGE_S      D_image;
	GRAY_IMAGE_S      prev_Dimage;



}
IpBGCodeBookOptimizedModel;
IMP_VOID ipCreateCodebookOptimizedBgModel( IpBGCodeBookOptimizedModel *module, PEA_DETECTOR_DATA_S *detdata, PEA_RESULT_S *iresult, GA_HARDWARE_RS_S *hw_resource );
IMP_VOID ipReleaseCodebookOptimizedBgModel( IpBGCodeBookOptimizedModel *module );
IMP_VOID ipConfigCodebookOptimizedBgModel( IpBGCodeBookOptimizedModel *module, IpCodebookPara *mpara );
IMP_S32 ipProcessCodebookOptimizedBgModel( IpBGCodeBookOptimizedModel *module );
IMP_VOID ipPostProcessCodebookOptimizedBgModel( IpBGCodeBookOptimizedModel *module , IMP_S32 flag);


