2012年01月09日 星期一 09时47分28秒 
将老版本保存一份，名为imp_src20120109

2012年01月10日 星期二 16时24分19秒 
发现噪声估计有点问题，于是加入了边缘检测，滤除边缘点，以减少图像边缘对估噪的影响

2012年01月17日 星期二 18时02分23秒 
1.对ViBe的扩散方法进行了小的改动，与背景越相似，越容易扩散。这样做的效果是可以让背景中的ghost可以更快的去除掉。
2.在arm上测试算法速度在100ms。背景数是10。应该是由于大量的内存访问导致了耗时的增加。
目前的ViBe在目标保持，目标区域精确度，光照适应能力上要比原来的快速背景方法有明显的优势。在随机摆动处理上要稍微强一点点。大部分类似噪声的随机摆动实际上是被中值滤波给处理掉了。

2012年01月31日 星期二 18时11分55秒 
更少的4个背景的情况下导致目标经过区域散点的出现，在20个背景的情况下散点不会出现。克服4背景下散点的问题。
为了让慢速目标或低对比度目标保持时间合理一些，将扩散速度放慢。
将目标抠取、背景更新进行了分离。只对目标轮廓区域进扩散。将背景分为两部分，一张用于处理光照变化和边缘误检的背景Ａ，三张用于扩散的背景Ｂ。背景Ａ更新放在最后进行。
经过上述调整后：目前背景建模算法可以处理光照变化（目标和光照同时出现时会出现假目标），对慢速目标和低对比度目标的保持时长有合理的处理。对于晚上的车灯没有处理能力。对随机摆动没有处理能力。

为什么用１张特殊背景：由于扩散，会使图像边缘不稳定，再加上只有四个背景，随机扩散会使边缘被破坏，导致的图像边缘很容易被检测出来，用１张特殊背景可以有效避免此类情况。
为什么用４背景：４背景可以用INT类型来存储，可以方便以后的优化。
为什么用三张背景扩散：扩散具有随机性，如果用一张的话，那么会发现图像的散点比较多。用三张会有明显的减少。

2012年02月02日 星期四 12时10分34秒 
引入了帧差方法来判断像素是否静止，这样更准确。采用了２个背景。未优化的版本在ARM上的耗时为14ms。
对一般性的低对比度，慢速目标均有良好的检出能力和保持能力。对光照变化有良好的适应性。不能处理类似树叶摆动的问题，当目 标与光照变化同时发生时，会出现假目标问题，不过背景会很快适应过来。对目标和伪目标的不同融解速度是新算法的一个特点。

2012年02月13日 星期一 12时22分07秒 
加入对场景突变的判断，但是猜测在板子上存在场景切换时判断不准的情况。去除了codebook和fast_bkg的代码。将vibe应用到了PEA中。
目前PEA在HS3520上的耗时在19ms左右。但是峰值有时会达到65ms。原因不明。

2012年02月20日 星期一 17时56分49秒 
1.将噪声估计去掉了图像下采样部分，并调整了程序结构进行加速。
2.修正了程序崩溃的BUG。改正了随机数生成方法。

2012年03月12日 星期一 19时22分05秒 
对OSC进行一些代码上的修改,使之对外独立出一个接口.OSC和PEA可共用一个库.用PEA_REASULT_S中的开关量s32ModuleSwitch控制.
分别对OSC和PEA进行测试,都有正常的效果给出.

2012年03月27日 星期二 12时58分21秒 
为OSC添加了移走报警功能。将背景扩散功能去除掉了，采用了快更新背景和慢更新背景结合的方法。

2012年04月24日 星期二 12时57分07秒 
暂时将vibe中慢速背景更新速度从64调到8.
64更新太慢, 8比较合适.
忘了当初为何要设为64.


2012年06月14日 星期四 09时13分43秒 
CIF:max used mem is (6052928)
QCIF:max used mem is (3693312)





